#define _CRT_SECURE_NO_DEPRECATE
#define WINDOW_SIZE 11025
#define NUM_COEFFICIENTS 160
#define TRESHOLD 1000000
#define START_TRESHOLD 0
#define END_TRESHOLD 10
#define GRANULARITY int(WINDOW_SIZE/(NUM_COEFFICIENTS*2))
#define START_PARTITION 0
#define START_FREQUENCY 0
#define PARTITIONS 8
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include "libmfcc.h"
#include "string.h"
#include <string>
#include <complex>
#include <cassert>
#include <valarray>
#include <windows.h> 


using namespace std;

typedef std::complex<double> Complex;
typedef std::valarray<Complex> CArray;

Complex com_window[WINDOW_SIZE];
int num_rows = 0;

double GetCoefficient(double* spectralData, unsigned int samplingRate, unsigned int NumFilters, unsigned int binSize, unsigned int m)
{
	double result = 0.0f;
	double outerSum = 0.0f;
	double innerSum = 0.0f;
	unsigned int k, l;

	// 0 <= m < L
	if (m >= NumFilters)
	{
		// This represents an error condition - the specified coefficient is greater than or equal to the number of filters. The behavior in this case is undefined.
		return 0.0f;
	}

	result = NormalizationFactor(NumFilters, m);


	for (l = 1; l <= NumFilters; l++)
	{
		// Compute inner sum
		innerSum = 0.0f;
		for (k = 0; k < binSize - 1; k++)
		{
			innerSum += fabs(spectralData[k] * GetFilterParameter(samplingRate, binSize, k, l));
		}

		if (innerSum > 0.0f)
		{
			innerSum = log(innerSum); // The log of 0 is undefined, so don't use it
		}

		innerSum = innerSum * cos(((m * PI) / NumFilters) * (l - 0.5f));

		outerSum += innerSum;
	}

	result *= outerSum;

	return result;
}

/*
* Computes the Normalization Factor (Equation 6)
* Used for internal computation only - not to be called directly
*/
double NormalizationFactor(int NumFilters, int m)
{
	double normalizationFactor = 0.0f;

	if (m == 0)
	{
		normalizationFactor = sqrt(1.0f / NumFilters);
	}
	else
	{
		normalizationFactor = sqrt(2.0f / NumFilters);
	}

	return normalizationFactor;
}

/*
* Compute the filter parameter for the specified frequency and filter bands (Eq. 2)
* Used for internal computation only - not the be called directly
*/
double GetFilterParameter(unsigned int samplingRate, unsigned int binSize, unsigned int frequencyBand, unsigned int filterBand)
{
	double filterParameter = 0.0f;

	double boundary = (frequencyBand * samplingRate) / binSize;		// k * Fs / N
	double prevCenterFrequency = GetCenterFrequency(filterBand - 1);		// fc(l - 1) etc.
	double thisCenterFrequency = GetCenterFrequency(filterBand);
	double nextCenterFrequency = GetCenterFrequency(filterBand + 1);

	if (boundary >= 0 && boundary < prevCenterFrequency)
	{
		filterParameter = 0.0f;
	}
	else if (boundary >= prevCenterFrequency && boundary < thisCenterFrequency)
	{
		filterParameter = (boundary - prevCenterFrequency) / (thisCenterFrequency - prevCenterFrequency);
		filterParameter *= GetMagnitudeFactor(filterBand);
	}
	else if (boundary >= thisCenterFrequency && boundary < nextCenterFrequency)
	{
		filterParameter = (boundary - nextCenterFrequency) / (thisCenterFrequency - nextCenterFrequency);
		filterParameter *= GetMagnitudeFactor(filterBand);
	}
	else if (boundary >= nextCenterFrequency && boundary < samplingRate)
	{
		filterParameter = 0.0f;
	}

	return filterParameter;
}

/*
* Compute the band-dependent magnitude factor for the given filter band (Eq. 3)
* Used for internal computation only - not the be called directly
*/
double GetMagnitudeFactor(unsigned int filterBand)
{
	double magnitudeFactor = 0.0f;

	if (filterBand >= 1 && filterBand <= 14)
	{
		magnitudeFactor = 0.015;
	}
	else if (filterBand >= 15 && filterBand <= 48)
	{
		magnitudeFactor = 2.0f / (GetCenterFrequency(filterBand + 1) - GetCenterFrequency(filterBand - 1));
	}

	return magnitudeFactor;
}

/*
* Compute the center frequency (fc) of the specified filter band (l) (Eq. 4)
* This where the mel-frequency scaling occurs. Filters are specified so that their
* center frequencies are equally spaced on the mel scale
* Used for internal computation only - not the be called directly
*/
double GetCenterFrequency(unsigned int filterBand)
{
	double centerFrequency = 0.0f;
	double exponent;

	if (filterBand == 0)
	{
		centerFrequency = 0;
	}
	else if (filterBand >= 1 && filterBand <= 14)
	{
		centerFrequency = (200.0f * filterBand) / 3.0f;
	}
	else
	{
		exponent = filterBand - 14.0f;
		centerFrequency = pow(1.0711703, exponent);
		centerFrequency *= 1073.4;
	}

	return centerFrequency;
}

double* to_mono(double* x) {
	double* p_w = new double[WINDOW_SIZE / 2];
	memset(p_w, 0, sizeof(double) * WINDOW_SIZE / 2);
	for (int i = 0; i < WINDOW_SIZE / 2; i = i + 2) {
		p_w[i] = x[i] / 2 + x[i + 1] / 2;
	}
	return p_w;
}

int calc_average_value(CArray data, int start, int end, int norm)
{
	long average = 0;
	long position = 0;

	for (int y = start; y < end; y++) {
		if (abs(data[y]) > average) { average = abs(data[y]); position = y; }
	}

	//cout << average << endl;
	return int(position);
}

int calc_intensity_value(CArray data, int start, int end, int norm)
{
	long average = 0;
	long position = 0;

	for (int y = start; y < end; y++) {
		average += abs(data[y]);
	}

	//cout << average << endl;
	return int(average);
}

void fft(CArray& x)
{
	const size_t N = x.size();
	if (N <= 1) return;

	// divide
	CArray even = x[std::slice(0, N / 2, 2)];
	CArray  odd = x[std::slice(1, N / 2, 2)];

	// conquer
	fft(even);
	fft(odd);

	// combine
	for (size_t k = 0; k < N / 2; ++k)
	{
		std::complex<double> t = std::polar(1.0, -2 * PI * k / N) * odd[k];
		x[k] = even[k] + t;
		x[k + N / 2] = even[k] - t;
	}
}


struct wav_header_t
{
	char chunkID[4]; //"RIFF" = 0x46464952
	unsigned long chunkSize; //28 [+ sizeof(wExtraFormatBytes) + wExtraFormatBytes] + sum(sizeof(chunk.id) + sizeof(chunk.size) + chunk.size)
	char format[4]; //"WAVE" = 0x45564157
	char subchunk1ID[4]; //"fmt " = 0x20746D66
	unsigned long subchunk1Size; //16 [+ sizeof(wExtraFormatBytes) + wExtraFormatBytes]
	unsigned short audioFormat;
	unsigned short numChannels;
	unsigned long sampleRate;
	unsigned long byteRate;
	unsigned short blockAlign;
	unsigned short bitsPerSample;
	//[WORD wExtraFormatBytes;]
	//[Extra format bytes]
};

//Chunks
struct chunk_t
{
	char ID[4]; //"data" = 0x61746164
	unsigned long size;  //Chunk data bytes
};

void WavReader(const char* fileName, const char* data_train, int giv_class)
{
	FILE *fin = fopen(fileName, "rb");
	FILE *fout_data_train = fopen(data_train, "a+");
	//Read WAV header
	wav_header_t header;
	fread(&header, sizeof(header), 1, fin);
	//Reading file
	chunk_t chunk;
	//printf("id\t" "size\n");
	//go to data chunk
	while (true)
	{
		fread(&chunk, sizeof(chunk), 1, fin);
		//printf("%c%c%c%c\t" "%li\n", chunk.ID[0], chunk.ID[1], chunk.ID[2], chunk.ID[3], chunk.size);
		if (*(unsigned int *)&chunk.ID == 0x61746164)
			break;
		//skip chunk data bytes
		fseek(fin, chunk.size, SEEK_CUR);
	}

	//Number of samples
	int sample_size = header.bitsPerSample / 8;
	int samples_count = chunk.size * 8 / header.bitsPerSample;
	printf("Samples count = %i\n", samples_count);

	short int *window = new short int[WINDOW_SIZE];
	double *window_s = new double[WINDOW_SIZE];
	double* processed_window = new double[WINDOW_SIZE / 2];
	Complex com_window[WINDOW_SIZE / 2];
	memset(window, 0, sizeof(short int) * WINDOW_SIZE / 2);
	memset(window_s, 0, sizeof(double) * WINDOW_SIZE / 2);
	memset(processed_window, 0, sizeof(double) * WINDOW_SIZE / 2);
	//Reading data
	//short int average = calc_average(value, samples_count);
	int total_windows = samples_count / WINDOW_SIZE - 1;
	for (int i = 0; i < total_windows; i++)
	{
		int k = 0;

		for (int j = 0; j < WINDOW_SIZE; j++)
		{
			fread(&window[j], sample_size, 1, fin);
			window_s[j] = double(window[j]);
		}

		//window = l_p(window,1);

		processed_window = to_mono(window_s);

		for (int j = 0; j < WINDOW_SIZE / 2; j++)
		{
			com_window[j] = processed_window[j];
		}

		CArray data(com_window, WINDOW_SIZE / 2);

		cout << i << " window" << endl;

		int start = 0;
		int end = 0;
		string samples = "";
		double total = 0;
		double average = 0;
		double norm = 0;
		double intensity = 0;

		fft(data);

		for (int t = START_PARTITION; t < NUM_COEFFICIENTS / PARTITIONS; t++)
		{
			average = 0;
			start = GRANULARITY*t;
			end = GRANULARITY*(t + 1);
			norm = end - start;
			intensity = calc_intensity_value(data, start, end, norm);
			if (t >= START_TRESHOLD || t < END_TRESHOLD) {
				total = total + int(intensity);
			}
		}



		double coff[12];

		if (total >= TRESHOLD) {
			cout << total << "\n";
			for (int y = 0; y < 12; y++) {
				coff[y] = GetCoefficient(processed_window, 44100, 13, 128, y+1);
				cout << 1000 - coff[y] * 1000 << " ";
				samples += to_string(1000 - coff[y] * 1000) + " ";
			}
			fprintf(fout_data_train, "%s", samples.c_str());
			fprintf(fout_data_train, "%d\n", giv_class);
			num_rows++;
			cout << "NUM_ROWS = " << num_rows << endl;
		}

		else {
			cout << " DISCARDED ";
		}

		cout << endl;

	}

	free(window);
	fclose(fin);
	fclose(fout_data_train);
}

int main()
{

	string path = "C:\\Users\\domis\\Desktop\\Music_reduced\\";
	string searchPattern = "*.wav";
	string fullSearchPath = path + searchPattern;

	WIN32_FIND_DATA FindData;
	HANDLE hFind;

	hFind = FindFirstFile(fullSearchPath.c_str(), &FindData);

	if (hFind == INVALID_HANDLE_VALUE)
	{
		cout << "Error searching directory\n";
		return -1;
	}

	do
	{
		string filePath = path + FindData.cFileName;
		const char* sc = filePath.c_str();

		if (filePath.find("£HUMAN_TRUE") != std::string::npos) {
			if (filePath.find("£VOICE_FALSE") != std::string::npos) {
				cout << filePath << " class " << 0 << endl;
				WavReader(sc, "data_set.train", 0);
			}

			if (filePath.find("£VOICE_TRUE") != std::string::npos) {
				cout << filePath << " class " << 1 << endl;
				WavReader(sc, "data_set.train", 1);
			}
		}

	} while (FindNextFile(hFind, &FindData) > 0);

	if (GetLastError() != ERROR_NO_MORE_FILES)
	{
		cout << "Something went wrong during searching\n";
	}

	system("pause");
	return 0;
}