#define _CRT_SECURE_NO_DEPRECATE
#define WINDOW_SIZE 11025
#define NUM_COEFFICIENTS 160
#define TRESHOLD 7000000
#define START_TRESHOLD 0
#define END_TRESHOLD 10
#define GRANULARITY int(WINDOW_SIZE/(NUM_COEFFICIENTS*2))
#define START_PARTITION 0
#define START_FREQUENCY 0
#define PARTITIONS 8
#define SAMPLE_NUMBERS 374
#define NUM_ROWS 9067
#pragma comment(lib,"winmm.lib")
#include <Windows.h>
#include <mmsystem.h>
#include "opencv2/opencv.hpp"
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <string>
#include <complex>
#include <cassert>
#include <valarray>
#include <windows.h> 

typedef std::complex<double> Complex;
typedef std::valarray<std::complex<double>> CArray;

using namespace cv;
using namespace cv::ml;
using namespace std;

const double PI = 3.141592653589793238460;

float* selection_sort(float* arr, int size)
{
	int min;
	float temp;
	for (int i = 0; i < size; i++)
	{
		min = i;
		for (int j = i + 1; j < size; j++)
		{
			if (arr[j] < arr[min])
			{
				min = j;
			}
		}
		temp = arr[i];
		arr[i] = arr[min];
		arr[min] = temp;
	}
	return arr;
}

float* get_peaks(CArray data) {
	float* peaks = new float[NUM_COEFFICIENTS / PARTITIONS];
	float* dats = new float[WINDOW_SIZE / (PARTITIONS * 2)];
	memset(dats, 0, sizeof(float) * WINDOW_SIZE / (PARTITIONS * 2));
	memset(peaks, 0, sizeof(float) * NUM_COEFFICIENTS / PARTITIONS);

	for (int ii = 0; ii < WINDOW_SIZE / (PARTITIONS * 2); ii++) {
		dats[ii] = abs(data[ii]);
	}

	for (int tt = 0; tt < NUM_COEFFICIENTS / PARTITIONS; tt++) {
		peaks[tt] = 0;
	}

	int del = 20;
	int del2 = 5;
	bool* exclusions = new bool[WINDOW_SIZE / (PARTITIONS * 2)];

	for (int gg = 0; gg < WINDOW_SIZE / (PARTITIONS * 2); gg++) {
		exclusions[gg] = false;
	}

	for (int dd = 0; dd < NUM_COEFFICIENTS / PARTITIONS; dd++) {
		float cur_max = 0;
		float cur_pos = 0;

		for (int uu = 0; uu < WINDOW_SIZE / (PARTITIONS * 2); uu++) {
			if (dats[uu] > cur_max && dats[uu]>dats[uu - 1] + del2 && dats[uu]>dats[uu + 1] + del2 && exclusions[uu] == false && uu>80 && uu<400) {
				cur_max = dats[uu];
				cur_pos = uu;
				peaks[dd] = cur_pos;
			}
		}
		for (int jj = cur_pos - del; jj < cur_pos + del; jj++) {
			if (jj >= 0) { exclusions[jj] = true; }
		}
	}
	return selection_sort(peaks, NUM_COEFFICIENTS / PARTITIONS);
}


short int* to_mono(short int* x) {
	short int* p_w = new short int[WINDOW_SIZE / 2];
	memset(p_w, 0, sizeof(short int) * WINDOW_SIZE / 2);
	for (int i = 0; i < WINDOW_SIZE / 2; i = i + 2) {
		p_w[i] = x[i] / 2 + x[i + 1] / 2;
	}
	return p_w;
}

int calc_average_value(CArray data, int start, int end, int norm)
{
	long average = 0;
	long position = 0;

	for (int y = start; y < end; y++) {
		if (abs(data[y]) > average) { average = abs(data[y]); position = y; }
	}

	//cout << average << endl;
	return int(position);
}

int calc_intensity_value(CArray data, int start, int end, int norm)
{
	long average = 0;
	long position = 0;

	for (int y = start; y < end; y++) {
		average += abs(data[y]);
	}

	//cout << average << endl;
	return int(average);
}

short int* acquire_mic()
{
	// Fill the WAVEFORMATEX struct to indicate the format of our recorded audio
	//   For this example we'll use "CD quality", ie:  44100 Hz, stereo, 16-bit
	WAVEFORMATEX wfx = {};
	wfx.wFormatTag = WAVE_FORMAT_PCM;       // PCM is standard
	wfx.nChannels = 2;                      // 2 channels = stereo sound
	wfx.nSamplesPerSec = 44100;             // Samplerate.  44100 Hz
	wfx.wBitsPerSample = 16;                // 16 bit samples
											// These others are computations:
	wfx.nBlockAlign = wfx.wBitsPerSample * wfx.nChannels / 8;
	wfx.nAvgBytesPerSec = wfx.nBlockAlign * wfx.nSamplesPerSec;


	// Open our 'waveIn' recording device
	HWAVEIN wi;
	waveInOpen(&wi,            // fill our 'wi' handle
		WAVE_MAPPER,    // use default device (easiest)
		&wfx,           // tell it our format
		NULL, NULL,      // we don't need a callback for this example
		CALLBACK_NULL | WAVE_FORMAT_DIRECT   // tell it we do not need a callback
	);

	// At this point, we have our device, now we need to give it buffers (with headers) that it can
	//  put the recorded audio somewhere
	char buffers[WINDOW_SIZE * 2 * 2 / 2];    // 1 buffer, half of a second long
	WAVEHDR headers[1] = { {} };           // initialize to zeros
	headers[0].lpData = buffers;             // give it a pointer to our buffer
	headers[0].dwBufferLength = WINDOW_SIZE * 2 * 2 / 2;      // tell it the size of that buffer in bytes
															  // the other parts of the header we don't really care about for this example, and can be left at zero

															  // Prepare each header
	waveInPrepareHeader(wi, &headers[0], sizeof(headers[0]));

	// And add it to the queue
	//  Once we start recording, queued buffers will get filled with audio data
	waveInAddBuffer(wi, &headers[0], sizeof(headers[0]));

	// start recording!
	waveInStart(wi);

	// Now that we are recording, keep polling our buffers to see if they have been filled.
	//   If they have been, dump their contents to the file and re-add them to the queue so they
	//   can get filled again, and again, and again

	short int *samples = new short int[WINDOW_SIZE];
	memset(samples, 0, sizeof(short int) * WINDOW_SIZE);
	int cont = 0;
	while (cont<1)  // keep looping until the user hits escape
	{
		for (auto& h : headers)      // check each header
		{
			if (h.dwFlags & WHDR_DONE)           // is this header done?
			{
				// if yes, dump it to our file
				for (int y = 0; y < WINDOW_SIZE * 2 * 2 / 2; y = y + 2) {
					samples[y / 2] = (buffers[y + 1] << 8) | (buffers[y] & 0xff);
				}

				// then re-add it to the queue
				h.dwFlags = 0;          // clear the 'done' flag
				h.dwBytesRecorded = 0;  // tell it no bytes have been recorded

										// re-add it  (I don't know why you need to prepare it again though...)
				waveInPrepareHeader(wi, &h, sizeof(h));
				waveInAddBuffer(wi, &h, sizeof(h));
				cont++;
			}
		}
	}

	// Once the user hits escape, stop recording, and clean up
	waveInStop(wi);
	for (auto& h : headers)
	{
		waveInUnprepareHeader(wi, &h, sizeof(h));
	}
	waveInClose(wi);

	// All done!

	return samples;
}

void fft(CArray& x)
{
	const size_t N = x.size();
	if (N <= 1) return;

	// divide
	CArray even = x[std::slice(0, N / 2, 2)];
	CArray  odd = x[std::slice(1, N / 2, 2)];

	// conquer
	fft(even);
	fft(odd);

	// combine
	for (size_t k = 0; k < N / 2; ++k)
	{
		std::complex<double> t = std::polar(1.0, -2 * PI * k / N) * odd[k];
		x[k] = even[k] + t;
		x[k + N / 2] = even[k] - t;
	}
}

Mat get_chunk() {
	Mat to_predict(1, SAMPLE_NUMBERS, CV_32F);
	short int *window = new short int[WINDOW_SIZE];
	short int* processed_window = new short int[WINDOW_SIZE / 2];
	std::complex<double> com_window[WINDOW_SIZE / 2];
	memset(window, 0, sizeof(short int) * WINDOW_SIZE / 2);
	memset(processed_window, 0, sizeof(short int) * WINDOW_SIZE / 2);
	//Reading data
	//short int average = calc_average(value, samples_count);
	int total_windows = 1;
	for (int i = 0; i < total_windows; i++)
	{
		int k = 0;

		window = acquire_mic();

		//window = l_p(window,1);

		processed_window = to_mono(window);

		for (int j = 0; j < WINDOW_SIZE / 2; j++)
		{
			com_window[j] = processed_window[j];
		}

		CArray data(com_window, WINDOW_SIZE / 2);

		fft(data);

		int count = 0;

		for (int u = START_FREQUENCY; u < WINDOW_SIZE / 16; u = u + 2) {
			to_predict.at<float>(0, count) = float(int(abs(data[u]) / 100));
			count++;
		}

		for (int u = WINDOW_SIZE / 16; u < WINDOW_SIZE / 4; u = int(float(u*1.05))) {
			to_predict.at<float>(0, count) = float(int(abs(data[u]) / 100));
			count++;
		}

		cout << count << endl;
	}

	return to_predict;
}

Mat get_input(int num_samples) {
	Mat inp_nn(num_samples, SAMPLE_NUMBERS, CV_32F);
	int position = 0;
	int row_counter = 0;
	int curr_value = 0;
	std::ifstream input("C:\\Users\\domis\\Desktop\\ARTIFICIAL_INTELLIGENCE\\first_data_set.train");
	for (std::string line; getline(input, line); )
	{
		istringstream iss(line);
		position = 0;
		do
		{
			string subs;
			iss >> subs;
			curr_value = stoi(subs, nullptr, 10);
			inp_nn.at<float>(row_counter, position) = float(curr_value);
			//cout << "Substring: " << inp_nn.at<float>(row_counter, position) << " IN " << position << endl;
			position++;

		} while (position<SAMPLE_NUMBERS);
		row_counter++;
		cout << "INPUT ACQUISITION AT " << float(float(row_counter) / NUM_ROWS) * 100 << "%" << endl;
		if (row_counter == num_samples) { break; }
	}
	return inp_nn;
}

Mat get_output(int num_samples) {
	Mat out_nn(num_samples, 1, CV_32S);
	int position = 0;
	int row_counter = 0;
	int curr_value = 0;
	std::ifstream input("C:\\Users\\domis\\Desktop\\ARTIFICIAL_INTELLIGENCE\\first_data_set.train");
	for (std::string line; getline(input, line); )
	{
		istringstream iss(line);
		position = 0;
		do
		{
			string subs;
			iss >> subs;
			curr_value = stoi(subs, nullptr, 10);
			if (position == SAMPLE_NUMBERS)
			{
				if (curr_value == 0) {
					out_nn.at<float>(row_counter, 0) = 0;
				}
				if (curr_value == 1) {
					out_nn.at<float>(row_counter, 0) = 1;
				}
				cout << "OUTPUT ACQUISITION AT " << float(float(row_counter) / NUM_ROWS) * 100 << "%" << endl;
			}
			position++;

		} while (position<SAMPLE_NUMBERS + 1);

		row_counter++;
		if (row_counter == num_samples) { break; }
	}
	return out_nn;
}

int main()
{
	int num_samples = NUM_ROWS;

	Mat inp_nn; // input patterns, up to 300 examples
				// each pattern is 6 float 32-bit values
				// the 6 values translate the visual figure to identify

	Mat out_nn; // output patterns formed by 3 values- one neuron by each class, up to 300 examples

	Mat to_predict; //external prediction, not belonging even to the initial test set, further control...

	Mat predicted_outcome(1, 1, CV_32S); //predicted for external outcome

	Ptr<SVM> svm = cv::ml::SVM::create();

	inp_nn = get_input(num_samples);

	out_nn = get_output(num_samples);

	cv::Ptr<cv::ml::TrainData> data_set = TrainData::create(inp_nn, cv::ml::ROW_SAMPLE, out_nn);

	svm->setType(ml::SVM::C_SVC); // type of SVM: SVC - SVM for classification and it uses the slack C to allow some errors on the data
	svm->setKernel(ml::SVM::RBF); // the kernel will be a RBF Radial-Base-Function
	svm->trainAuto(data_set, 3); // cross-validation using 3 folds

	svm->save("svm_first.dat");

	cout << "TRAINING ENDED, MARVELOUS !!\n";

	cv::Mat results;
	float train_performance = svm->calcError(data_set,
		false, // use train data
		results // cv::noArray()
	);

	float test_performance = svm->calcError(data_set,
		true, // use test data
		results // cv::noArray()
	);

	cout << "Performance on training data: " << train_performance << " % error" << endl;
	cout << "Performance on test data: " << test_performance << " % error " << endl;

	float avg1 = 0;


	for (int i = 0; i >= 0; i++) {

		to_predict = get_chunk();

		svm->predict(to_predict, predicted_outcome);

		cout << predicted_outcome.at<float>(0, 0) << endl;

	}

	float x = 0;

	cin >> x;

} // main
