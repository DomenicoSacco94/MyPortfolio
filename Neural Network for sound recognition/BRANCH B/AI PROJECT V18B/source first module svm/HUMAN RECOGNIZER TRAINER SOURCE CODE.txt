#define _CRT_SECURE_NO_DEPRECATE
#define WINDOW_SIZE 11025
#define NUM_COEFFICIENTS 160
#define TRESHOLD 1000000
#define START_TRESHOLD 0
#define END_TRESHOLD 10
#define GRANULARITY int(WINDOW_SIZE/(NUM_COEFFICIENTS*2))
#define START_PARTITION 0
#define START_FREQUENCY 0
#define PARTITIONS 8
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include "string.h"
#include <string>
#include <complex>
#include <cassert>
#include <valarray>
#include <windows.h> 

using namespace std;

const double PI = 3.141592653589793238460;

typedef std::complex<double> Complex;
typedef std::valarray<Complex> CArray;

Complex com_window[WINDOW_SIZE];
int num_rows = 0;

short int* to_mono(short int* x) {
	short int* p_w = new short int[WINDOW_SIZE / 2];
	memset(p_w, 0, sizeof(short int) * WINDOW_SIZE / 2);
	for (int i = 0; i < WINDOW_SIZE / 2; i = i + 2) {
		p_w[i] = x[i] / 2 + x[i + 1] / 2;
	}
	return p_w;
}

short int* low_pass(short int* x) {

	int *y = new int[WINDOW_SIZE];
	short int *result = new short int[WINDOW_SIZE];
	memset(y, 0, sizeof(int) * WINDOW_SIZE);
	memset(result, 0, sizeof(short int) * WINDOW_SIZE);

	//FIRST FILTER
	//y[n] = (1 * x[n - 1]) / 2.749
	//+ (1 * x[n - 0]) / 2.749
	//+ (0.7490960131 * y[n - 1]) / 2.749;

	//SECOND FILTER
	//y[n] = (1 * x[n - 2]) / 4.933
	//+ (2 * x[n - 1]) / 4.933
	//+ (1 * x[n - 0]) / 4.933
	//+ (-0.6683689946 * y[n - 2]) / 4.933
	//+ (1.6010923942 * y[n - 1]) / 4.933;

	//THIRD FILTER
	//y[n] = (1 * x[n - 2]) / 4.9815
	//+ (2 * x[n - 1]) / 4.9815
	//+ (1 * x[n - 0]) / 4.9815
	//+ (-0.8175124034 * y[n - 2]) / 4.9815
	//+ (1.7990964095 * y[n - 1]) / 4.9815;

	//FOURTH FILTER
	//y[n] = (1 * x[n - 2]) / 4.995
	//+ (2 * x[n - 1]) / 4.995
	//+ (1 * x[n - 0]) / 4.995

	//+ (-0.9040596527 * y[n - 2]) / 4.995
	//+ (1.8992193292 * y[n - 1]) / 4.995;

	//FIFTH FILTER
	//y[n] = (1 * x[n - 3]) / 8.993
	//+ (3 * x[n - 2]) / 8.993
	//+ (3 * x[n - 1]) / 8.993
	//+ (1 * x[n - 0]) / 8.993
	//+ (0.8670420126 * y[n - 3]) / 8.993
	//+ (-2.7247727381 * y[n - 2]) / 8.993
	//+ (2.8573925172 * y[n - 1]) / 8.993;

	//SIXTH FILTER
	//y[n] = (1 * x[n - 3]) / 9
	//+ (3 * x[n - 2]) / 9
	//+ (3 * x[n - 1]) / 9
	//+ (1 * x[n - 0]) / 9
	//+ (0.9311614800 * y[n - 3]) / 9
	//+ (-2.8598902349 * y[n - 2]) / 9
	//+ (2.9286849853 * y[n - 1]) / 9;
	y[0] = x[0];
	y[1] = x[1];
	y[2] = y[2];
	y[3] = y[3];

	for (int n = 4; n < WINDOW_SIZE; n++)
	{
		y[n] = (1 * x[n - 4]) / 16.999
			+ (4 * x[n - 3]) / 16.999
			+ (6 * x[n - 2]) / 16.999
			+ (4 * x[n - 1]) / 16.999
			+ (1 * x[n - 0]) / 16.999
			+ (-0.9110219631 * y[n - 4]) / 16.999
			+ (3.7289769642 * y[n - 3]) / 16.999
			+ (-5.7247764514 * y[n - 2]) / 16.999
			+ (3.9068199063 * y[n - 1]) / 16.999;
	}

	for (int n = 1; n < WINDOW_SIZE; n++)
	{
		result[n] = y[n];
	}

	free(y);
	return result;
}

short int* l_p(short int* x, int times) {
	for (int i = 0; i < times; i++) {
		x = low_pass(x);
	}
	return x;
}

float* selection_sort(float* arr, int size)
{
	int min;
	float temp;
	for (int i = 0; i < size; i++)
	{
		min = i;
		for (int j = i + 1; j < size; j++)
		{
			if (arr[j] < arr[min])
			{
				min = j;
			}
		}
		temp = arr[i];
		arr[i] = arr[min];
		arr[min] = temp;
	}
	return arr;
}

float* get_peaks(CArray data) {
	float* peaks = new float[NUM_COEFFICIENTS / PARTITIONS];
	float* dats = new float[WINDOW_SIZE / (PARTITIONS * 2)];
	memset(dats, 0, sizeof(float) * WINDOW_SIZE / (PARTITIONS * 2));
	memset(peaks, 0, sizeof(float) * NUM_COEFFICIENTS / PARTITIONS);

	for (int ii = 0; ii < WINDOW_SIZE / (PARTITIONS * 2); ii++) {
		dats[ii] = abs(data[ii]);
	}

	for (int tt = 0; tt < NUM_COEFFICIENTS / PARTITIONS; tt++) {
		peaks[tt] = 0;
	}

	int del = 20;
	int del2 = 5;
	bool* exclusions = new bool[WINDOW_SIZE / (PARTITIONS * 2)];

	for (int gg = 0; gg < WINDOW_SIZE / (PARTITIONS * 2); gg++) {
		exclusions[gg] = false;
	}

	for (int dd = 0; dd < NUM_COEFFICIENTS / PARTITIONS; dd++) {
		float cur_max = 0;
		float cur_pos = 0;

		for (int uu = 0; uu < WINDOW_SIZE / (PARTITIONS * 2); uu++) {
			if (dats[uu] > cur_max && dats[uu]>dats[uu - 1] + del2 && dats[uu]>dats[uu + 1] + del2 && exclusions[uu] == false && uu>80 && uu<400) {
				cur_max = dats[uu];
				cur_pos = uu;
				peaks[dd] = cur_pos;
			}
		}
		for (int jj = cur_pos - del; jj < cur_pos + del; jj++) {
			if (jj >= 0) { exclusions[jj] = true; }
		}
	}
	return selection_sort(peaks, NUM_COEFFICIENTS / PARTITIONS);
}

int calc_average_value(CArray data, int start, int end, int norm)
{
	long average = 0;
	long position = 0;

	for (int y = start; y < end; y++) {
		if (abs(data[y]) > average) { average = abs(data[y]); position = y; }
	}

	//cout << average << endl;
	return int(position);
}

int calc_intensity_value(CArray data, int start, int end, int norm)
{
	long average = 0;
	long position = 0;

	for (int y = start; y < end; y++) {
		average += abs(data[y]);
	}

	//cout << average << endl;
	return int(average);
}

struct wav_header_t
{
	char chunkID[4]; //"RIFF" = 0x46464952
	unsigned long chunkSize; //28 [+ sizeof(wExtraFormatBytes) + wExtraFormatBytes] + sum(sizeof(chunk.id) + sizeof(chunk.size) + chunk.size)
	char format[4]; //"WAVE" = 0x45564157
	char subchunk1ID[4]; //"fmt " = 0x20746D66
	unsigned long subchunk1Size; //16 [+ sizeof(wExtraFormatBytes) + wExtraFormatBytes]
	unsigned short audioFormat;
	unsigned short numChannels;
	unsigned long sampleRate;
	unsigned long byteRate;
	unsigned short blockAlign;
	unsigned short bitsPerSample;
	//[WORD wExtraFormatBytes;]
	//[Extra format bytes]
};

//Chunks
struct chunk_t
{
	char ID[4]; //"data" = 0x61746164
	unsigned long size;  //Chunk data bytes
};

void fft(CArray& x)
{
	const size_t N = x.size();
	if (N <= 1) return;

	// divide
	CArray even = x[std::slice(0, N / 2, 2)];
	CArray  odd = x[std::slice(1, N / 2, 2)];

	// conquer
	fft(even);
	fft(odd);

	// combine
	for (size_t k = 0; k < N / 2; ++k)
	{
		Complex t = std::polar(1.0, -2 * PI * k / N) * odd[k];
		x[k] = even[k] + t;
		x[k + N / 2] = even[k] - t;
	}
}

void WavReader(const char* fileName, const char* data_train, int giv_class)
{
	FILE *fin = fopen(fileName, "rb");
	FILE *fout_data_train = fopen(data_train, "a+");
	//Read WAV header
	wav_header_t header;
	fread(&header, sizeof(header), 1, fin);
	//Reading file
	chunk_t chunk;
	//printf("id\t" "size\n");
	//go to data chunk
	while (true)
	{
		fread(&chunk, sizeof(chunk), 1, fin);
		//printf("%c%c%c%c\t" "%li\n", chunk.ID[0], chunk.ID[1], chunk.ID[2], chunk.ID[3], chunk.size);
		if (*(unsigned int *)&chunk.ID == 0x61746164)
			break;
		//skip chunk data bytes
		fseek(fin, chunk.size, SEEK_CUR);
	}

	//Number of samples
	int sample_size = header.bitsPerSample / 8;
	int samples_count = chunk.size * 8 / header.bitsPerSample;
	printf("Samples count = %i\n", samples_count);

	short int *window = new short int[WINDOW_SIZE];
	short int* processed_window = new short int[WINDOW_SIZE / 2];
	Complex com_window[WINDOW_SIZE / 2];
	memset(window, 0, sizeof(short int) * WINDOW_SIZE / 2);
	memset(processed_window, 0, sizeof(short int) * WINDOW_SIZE / 2);
	//Reading data
	//short int average = calc_average(value, samples_count);
	int total_windows = samples_count / WINDOW_SIZE - 1;
	for (int i = 0; i < total_windows; i++)
	{
		int k = 0;

		for (int j = 0; j < WINDOW_SIZE; j++)
		{
			fread(&window[j], sample_size, 1, fin);
		}

		//window = l_p(window,1);

		processed_window = to_mono(window);

		for (int j = 0; j < WINDOW_SIZE / 2; j++)
		{
			com_window[j] = processed_window[j];
		}

		CArray data(com_window, WINDOW_SIZE / 2);

		cout << i << " window" << endl;

		int start = 0;
		int end = 0;
		string samples = "";
		float total = 0;
		float average = 0;
		float norm = 0;
		float intensity = 0;
		float* peaks = new float[NUM_COEFFICIENTS / PARTITIONS];
		memset(peaks, 0, sizeof(float) * NUM_COEFFICIENTS / PARTITIONS);

		for (int tt = 0; tt < NUM_COEFFICIENTS / PARTITIONS; tt++) {
			peaks[tt] = 0;
		}

		fft(data);
		int count = 0;

		for (int u = START_FREQUENCY; u < WINDOW_SIZE / 16; u = u + 2) {
			samples += to_string(int(abs(data[u]) / 100)) + " ";
			count++;
		}

		for (int u = WINDOW_SIZE / 16; u < WINDOW_SIZE / 4; u = int(float(u*1.03))) {
			samples += to_string(int(abs(data[u]) / 100)) + " ";
			count++;
		}

		for (int t = START_PARTITION; t < NUM_COEFFICIENTS / PARTITIONS; t++)
		{
			average = 0;
			start = GRANULARITY*t;
			end = GRANULARITY*(t + 1);
			norm = end - start;
			intensity = calc_intensity_value(data, start, end, norm);
			if (t >= START_TRESHOLD || t < END_TRESHOLD) {
				total = total + float(intensity);
			}
		}

		cout << total << " ";

		if (total > TRESHOLD) {
			fprintf(fout_data_train, "%s", samples.c_str());
			fprintf(fout_data_train, "%d\n", giv_class);
			num_rows++;
			cout << "NUM_SAMPLES = " << count << " NUM_ROWS = " << num_rows << endl;
		}

		else {
			cout << " DISCARDED ";
		}

		cout << endl;

	}

	free(window);
	fclose(fin);
	fclose(fout_data_train);
}

int main()
{

	string path = "C:\\Users\\domis\\Desktop\\Music_reduced\\";
	string searchPattern = "*.wav";
	string fullSearchPath = path + searchPattern;

	WIN32_FIND_DATA FindData;
	HANDLE hFind;

	hFind = FindFirstFile(fullSearchPath.c_str(), &FindData);

	if (hFind == INVALID_HANDLE_VALUE)
	{
		cout << "Error searching directory\n";
		return -1;
	}

	do
	{
		string filePath = path + FindData.cFileName;
		const char* sc = filePath.c_str();

		if (filePath.find("£HUMAN_FALSE") != std::string::npos) {
			cout << filePath << " class " << 0 << endl;
			WavReader(sc, "data_set.train", 0);
		}

		if (filePath.find("£HUMAN_TRUE") != std::string::npos) {
			cout << filePath << " class " << 1 << endl;
			WavReader(sc, "data_set.train", 1);
		}

	} while (FindNextFile(hFind, &FindData) > 0);

	if (GetLastError() != ERROR_NO_MORE_FILES)
	{
		cout << "Something went wrong during searching\n";
	}

	system("pause");
	return 0;
}